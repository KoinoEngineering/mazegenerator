{"version":3,"sources":["core/Component.ts","core/Immutable.ts","core/Action.ts","common/TextBox/index.tsx","pages/StickDown/parts/Room/index.tsx","pages/StickDown/parts/Maze/index.tsx","pages/StickDown/index.tsx","App.tsx","common/TextBox/state.ts","pages/StickDown/parts/Room/state.ts","pages/StickDown/parts/Maze/state.ts","pages/StickDown/state.ts","common/State.ts","common/Reducer.ts","serviceWorker.ts","common/Saga.ts","index.tsx"],"names":["ComponentBase","nextProps","this","props","state","React","fromJS","jsValue","path","Immutable","createPath","undefined","Array","isArray","map","elm","i","Object","keys","reduce","ret","key","Payload","option","isImmutable","style","createStyles","root","display","TextBox","dispatch","classes","className","type","value","get","onChange","e","target","payload","meta","withStyles","boxSizing","width","height","pillar","backgroundColor","wall","load","Room","classNames","row","borderCollapse","Maze","onClick","h","push","join","room","StickDown","App","initialTextBoxState","initialRoomState","initialMazeState","w","field","fill","length","initialStickDown","maze","initialState","reducer","action","actions","defaultAction","COMMON_TEXTBOX_CHANGE","updateIn","textBox","set","STICK_DOWN_CREATE_MAZE","directionMap","0","1","2","3","direction","Math","round","random","isLoad","setIn","STICK_DOWN_INIT_MAZE","toJS","hasIn","getIn","Boolean","window","location","hostname","match","rootSaga","takeEverySaga","STICK_DOWN_GNENRATE_START","STICK_DOWN_GNENRATE","SAGA_TAKEEVERY_ACTIONS","takeEvery","select","fork","pillarList","put","flatten","filter","pillerList","first","size","shift","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","createLogger","stateTransformer","run","rootRender","ReactDOM","render","getState","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c25ab9a.chunk.js","sourcesContent":["import * as React from 'react';\nimport { IPropBase } from './Props';\nexport class ComponentBase<P extends IPropBase<any>> extends React.Component<P, never>{\n  public shouldComponentUpdate(nextProps: Readonly<P>) {\n    return this.props.state !== nextProps.state;\n  }\n}","import Immutable from \"immutable\";\n\ntype Primitive = null | undefined | boolean | number | string;\nexport type fromJS<T> = T extends Primitive\n  ? T\n  : T extends Array<infer U>\n  ? {\n    0: Immutable.List<U>,\n    1: Immutable.List<fromJS<U>>\n  }[U extends Primitive ? 0 : 1]\n  : Immutable.Record<{\n    [K in keyof T]: fromJS<T[K]>\n  }>;\n\nexport const fromJS = <T>(\n  jsValue: T,\n  path: string[] = []\n): fromJS<WithPath<T>> => {\n  return Immutable.fromJS(createPath(jsValue, path));\n}\ntype Path<T> = {\n  [K in keyof T]: K extends \"path\" ? (string | number)[] : T[K]\n} & { path: (string | number)[] };\n\nexport type WithPath<T> = T extends Primitive\n  ? T\n  : T extends Array<infer U>\n  ? {\n    0: U[],\n    1: WithPath<U>[]\n  }[U extends Primitive ? 0 : 1]\n  : Path<{\n    [K in keyof T]: WithPath<T[K]>\n  }>;\n\nexport const createPath = (state: any, path: (string | number)[] = []): any => {\n  if (state === undefined) {\n    return state;\n  } else if (Array.isArray(state)) {\n    return state.map((elm, i) => createPath(elm, [...path, i]))\n  } else if (typeof state == \"object\") {\n    return Object.keys(state).reduce((ret, key) => {\n      if (key !== \"path\") {\n        ret[key] = createPath(state[key], [...path, key]);\n      }\n      return ret;\n    }, { ...state, path })\n  } else {\n    return state;\n  }\n}\nexport default Immutable;","import Immutable from \"./Immutable\";\nimport { Action as A } from \"redux\";\nimport { COMMON_ACTIONS } from \"../common/Reducer\";\nimport { SAGA_TAKEEVERY_ACTIONS } from \"../common/Saga\";\n\nexport interface IAction extends A<AllActions> {\n  payload: Payload\n  meta: any;\n}\n\nexport interface IPayload {\n  path: Immutable.List<string | number>,\n  option?: any\n}\n\nexport const generateAction = (type: AllActions, path: (Iterable<string | number>), option?: any): IAction => ({\n  type,\n  payload: new Payload(path, option),\n  meta: {}\n});\n\nexport class Payload implements IPayload {\n  constructor(path: (Iterable<string | number>), option?: any) {\n    this.path = Immutable.isImmutable(path) ? path : Immutable.fromJS(path);\n    this.option = option;\n  }\n\n  path: Immutable.List<string | number>\n  option?: any\n}\n\ntype AllActions = COMMON_ACTIONS | SAGA_TAKEEVERY_ACTIONS","import React, { ChangeEvent } from \"react\";\nimport { ComponentBase } from \"../../core/Component\";\nimport { ITextBoxProps } from \"./props\";\nimport { generateAction } from \"../../core/Action\";\nimport { createStyles, withStyles } from \"@material-ui/core\";\n\nconst style = createStyles({\n    root: {\n        display: \"inline-block\"\n    }\n})\n\nclass TextBox extends ComponentBase<ITextBoxProps> {\n    render() {\n        const { state, dispatch, classes } = this.props;\n        return <div className={classes.root}>\n            <input type=\"text\" value={state.get('value')} onChange={(e: ChangeEvent<HTMLInputElement>) => dispatch(generateAction(\"COMMON_TEXTBOX_CHANGE\", state.get('path'), { value: e.target.value }))} />\n        </div>;\n    }\n}\n\nexport default withStyles(style)(TextBox);","import { IRoomProps } from \"./props\";\nimport { ComponentBase } from \"../../../../core/Component\";\nimport React from \"react\";\nimport { createStyles } from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/styles\";\n\nconst style = createStyles({\n    root: {\n        display: \"inline-block\",\n        boxSizing: \"border-box\",\n        width: 10,\n        height: 10\n    },\n    pillar: {\n        backgroundColor: \"#000000\"\n    },\n    wall: {\n        backgroundColor: \"#000000\"\n    },\n    load: {\n        backgroundColor: \"#FFFFFF\"\n    },\n})\n\nclass Room extends ComponentBase<IRoomProps> {\n    render() {\n        const { state, classes } = this.props;\n        return <div className={classNames(classes.root, classes[state.get(\"type\")])} />;\n    }\n}\nexport default withStyles(style)(Room);","import React from \"react\";\nimport { ComponentBase } from \"../../../../core/Component\";\nimport { IMazeProps } from \"./props\";\nimport Room from \"../Room\";\nimport { withStyles, createStyles } from \"@material-ui/styles\";\n\nconst style = createStyles({\n    row: {\n        height: 10,\n        borderCollapse: \"collapse\"\n    }\n})\n\n\nclass Maze extends ComponentBase<IMazeProps> {\n    render() {\n        const { state, classes, dispatch } = this.props;\n        return <div >\n            <div>\n                <button onClick={() => dispatch({\n                    type: \"STICK_DOWN_GNENRATE_START\",\n                    payload: {\n                        path: state.get(\"path\")\n                    },\n                    meta: {}\n                })}>Generate</button>\n            </div>\n            <div>\n                {\n                    state.get(\"field\").map((row, h) => {\n                        return <div key={state.get(\"path\").push(h).join(\",\")} className={classes.row}>\n                            {\n                                row.map(room => {\n                                    return <Room key={room.get(\"path\").join(\",\")} state={room} />\n                                })\n                            }</div>\n                    })\n                }\n            </div>\n        </div>;\n    }\n}\nexport default withStyles(style)(Maze)","import React from \"react\";\nimport { ComponentBase } from \"../../core/Component\";\nimport { IStickDownProps } from \"./props\";\nimport TextBox from \"../../common/TextBox\";\nimport Maze from \"./parts/Maze\";\n\nexport class StickDown extends ComponentBase<IStickDownProps> {\n    render() {\n        const { state, dispatch } = this.props\n        return <div >\n            <div>\n                高さ：<TextBox state={state.get(\"height\")} dispatch={dispatch} />\n            </div>\n            <div>\n                幅&emsp;：<TextBox state={state.get(\"width\")} dispatch={dispatch} />\n            </div>\n            <div>\n                <Maze state={state.get(\"maze\")} dispatch={dispatch} />\n            </div>\n        </div >;\n    }\n}\n\n","import React from \"react\";\nimport { ComponentBase } from \"./core/Component\";\nimport { StickDown } from \"./pages/StickDown\";\nimport { IState } from \"./common/State\";\nimport { IPropsWithDispatch } from \"./core/Props\";\n\nexport default class App extends ComponentBase<IAPPProps> {\n    render() {\n        const { state } = this.props;\n        return <>\n            <StickDown state={state.get('StickDown')} dispatch={this.props.dispatch} />\n        </>\n    }\n}\n\ninterface IAPPProps extends IPropsWithDispatch<IState> { }\n","import { IStateBase } from \"../../core/State\";\n\nexport interface ITextBoxState {\n  value: string\n}\n\nexport type IImTextBoxState = IStateBase<ITextBoxState>\n\nexport const initialTextBoxState = (state?: Partial<ITextBoxState>): ITextBoxState => ({\n  value: \"\",\n  ...state\n})","import { IStateBase } from \"../../../../core/State\";\n\nexport interface IRoomState {\n  type: \"pillar\" | \"wall\" | \"load\";\n}\n\nexport interface IImRoomState extends IStateBase<IRoomState> { }\n\nexport const initialRoomState = (state?: IRoomState): IRoomState => ({\n  type: \"load\",\n  ...state\n})","import { initialRoomState, IRoomState } from \"../Room/state\";\nimport { IStateBase } from \"../../../../core/State\";\n\nexport interface IMazeState {\n  field: IRoomState[][]\n}\n\nexport interface IImMaseState extends IStateBase<IMazeState> { }\n\nexport const initialMazeState = (state?: IMazeState, h: number = 11, w: number = 11): IMazeState => {\n  let field: IRoomState[][] = Array<Array<IRoomState>>(h).fill([...Array(w).fill(initialRoomState())])\n  field = field.map((row, h): IRoomState[] => {\n    return row.map((room, w): IRoomState => {\n      // 辺は壁\n      if (h === 0 || h + 1 === field.length || w === 0 || w + 1 === row.length) {\n        return { ...room, type: \"wall\" }\n      } else if (!(h % 2) && !(w % 2)) {\n        // 奇数ますは柱\n        return { ...room, type: \"pillar\" }\n      } else {\n        return room;\n      }\n    })\n  });\n  return { field }\n}","import { ITextBoxState, initialTextBoxState } from \"../../common/TextBox/state\";\nimport { IMazeState, initialMazeState } from \"./parts/Maze/state\";\n\nexport interface IStickDownState {\n  height: ITextBoxState;\n  width: ITextBoxState;\n  maze: IMazeState;\n}\n\nexport const initialStickDown = (state?: Partial<IStickDownState>): IStickDownState => {\n  return {\n    height: initialTextBoxState(),\n    width: initialTextBoxState(),\n    maze: initialMazeState(),\n    ...state\n  }\n}","import { initialStickDown, IStickDownState } from \"../pages/StickDown/state\";\nimport { fromJS, WithPath } from \"../core/Immutable\";\n\nexport interface IState {\n  StickDown: IStickDownState\n}\n\nexport type IImState = fromJS<WithPath<IState>>\nexport const initialState = (state?: Partial<IState>): IState => {\n  return {\n    StickDown: initialStickDown(state && state.StickDown),\n  };\n}\n","import { Reducer } from \"redux\";\nimport { IImState, initialState } from \"./State\";\nimport { fromJS } from \"../core/Immutable\";\nimport { IAction } from \"../core/Action\";\nimport { IImTextBoxState } from \"./TextBox/state\";\nimport { IImRoomState } from \"../pages/StickDown/parts/Room/state\";\nimport { initialMazeState } from \"../pages/StickDown/parts/Maze/state\";\n\ntype IReducer = (state: IImState, action: IAction) => IImState;\n\ninterface ActionMap {\n  [K: string]: IReducer\n}\n\nconst reducer: Reducer<IImState, IAction> = (state: IImState = fromJS(initialState()), action: IAction): IImState => {\n\n  return (actions[action.type] || defaultAction)(state, action);\n}\n\nexport default reducer;\n\nexport type COMMON_ACTIONS = \"COMMON_TEXTBOX_CHANGE\" | \"STICK_DOWN_CREATE_MAZE\" | \"STICK_DOWN_INIT_MAZE\";\n\nconst actions: ActionMap = {\n  COMMON_TEXTBOX_CHANGE: (state: IImState, action: IAction) => {\n    return state.updateIn(action.payload.path, (textBox: IImTextBoxState) => {\n      return textBox.set(\"value\", action.payload.option.value);\n    });\n  },\n  STICK_DOWN_CREATE_MAZE: (state: IImState, action: IAction) => {\n    const directionMap = {\n      0: { h: -1, w: 0 },\n      1: { h: 0, w: -1 },\n      2: { h: 0, w: 1 },\n      3: { h: 1, w: 0 },\n    }\n\n    let direction: 0 | 1 | 2 | 3 = 0;\n    do {\n      direction = (Math.round(Math.random() * 100) % 4 as 0 | 1 | 2 | 3);\n      // 高さが2かつ上の時または既に壁になっているとき\n    } while ((action.payload.option.h === 2 && direction === 0) || !isLoad(state, action.payload.option.h, action.payload.option.w, directionMap[direction]))\n    return state.setIn([\n      \"StickDown\",\n      \"maze\",\n      \"field\",\n      action.payload.option.h + directionMap[direction].h,\n      action.payload.option.w + directionMap[direction].w,\n      \"type\"\n    ], \"wall\")\n  },\n  STICK_DOWN_INIT_MAZE: (state: IImState, action: IAction) => {\n    return state.setIn(\n      [\n        \"StickDown\",\n        \"maze\"\n      ],\n      fromJS(\n        initialMazeState(),\n        state.get(\"StickDown\").get(\"maze\").get(\"path\").toJS()\n      )\n    );\n  }\n}\nconst defaultAction: IReducer = (state: IImState, action: IAction) => state;\n\nconst isLoad = (state: IImState, h: number, w: number, direction: { h: number, w: number }) => {\n  const path = [\"StickDown\", \"maze\", \"field\", h + direction.h, w + direction.w];\n  return state.hasIn(path) && (state.getIn(path) as IImRoomState).get(\"type\") === \"load\";\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { put, select, takeEvery, fork } from \"redux-saga/effects\";\nimport { IAction } from \"../core/Action\";\nimport Immutable from \"../core/Immutable\";\nimport { IImMaseState } from \"../pages/StickDown/parts/Maze/state\";\nimport { IImRoomState } from \"../pages/StickDown/parts/Room/state\";\nimport { IImState } from \"./State\";\n\nconst SAGA_TAKEEVERY_ACTIONS: (SAGA_TAKEEVERY_ACTIONS)[] = [\n  \"COMMON_TEXTBOX_CHANGE_SAGA\",\n  \"STICK_DOWN_GNENRATE_START\",\n  \"STICK_DOWN_GNENRATE\"\n];\nexport type SAGA_TAKEEVERY_ACTIONS = \"COMMON_TEXTBOX_CHANGE_SAGA\" | \"STICK_DOWN_GNENRATE_START\" | \"STICK_DOWN_GNENRATE\"\nexport default function* rootSaga() {\n  yield takeEvery(SAGA_TAKEEVERY_ACTIONS, takeEverySaga)\n}\n\nfunction* takeEverySaga(action: IAction) {\n  const state: IImState = yield select();\n  switch (action.type) {\n    case \"STICK_DOWN_GNENRATE_START\":\n      yield fork(STICK_DOWN_GNENRATE_START, state.get(\"StickDown\").get(\"maze\"))\n      break;\n    case \"STICK_DOWN_GNENRATE\":\n      yield fork(STICK_DOWN_GNENRATE, action.meta.pillarList)\n      break;\n    default:\n      break;\n  }\n}\n\nfunction* STICK_DOWN_GNENRATE_START(maze: IImMaseState) {\n  yield put<IAction>({\n    type: \"STICK_DOWN_INIT_MAZE\",\n    payload: {\n      path: maze.get(\"path\")\n    },\n    meta: {}\n  });\n  yield put<IAction>({\n    type: \"STICK_DOWN_GNENRATE\",\n    payload: {\n      path: maze.get(\"path\")\n    },\n    meta: {\n      pillarList: (\n        maze.get(\"field\")\n          .flatten(true) as Immutable.List<IImRoomState>\n      ).filter(room => room.get(\"type\") === \"pillar\")\n    }\n  })\n}\n\nfunction* STICK_DOWN_GNENRATE(pillerList: Immutable.List<IImRoomState>) {\n  const target = pillerList.first<IImRoomState>();\n\n  if (target) {\n    yield put<IAction>({\n      type: \"STICK_DOWN_CREATE_MAZE\",\n      payload: {\n        path: target.get(\"path\"),\n        option: {\n          h: target.get(\"path\").get(target.get(\"path\").size - 2),\n          w: target.get(\"path\").get(target.get(\"path\").size - 1),\n        },\n      },\n      meta: {}\n    });\n    yield put<IAction>({\n      type: \"STICK_DOWN_GNENRATE\",\n      payload: {\n        path: target.get(\"path\")\n      },\n      meta: {\n        pillarList: pillerList.shift()\n      }\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore, applyMiddleware } from \"redux\";\nimport reducer from \"./common/Reducer\";\nimport * as serviceWorker from './serviceWorker';\nimport { IImState } from './common/State';\nimport { IAction } from './core/Action';\nimport { createLogger } from \"redux-logger\";\nimport createSagaMiddleware from 'redux-saga'\nimport rootSaga from './common/Saga';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore<IImState, IAction, {}, {}>(reducer, applyMiddleware(sagaMiddleware, createLogger({\n    stateTransformer: (state: IImState) => state.toJS(),\n})));\nsagaMiddleware.run(rootSaga)\n\nconst rootRender = () => ReactDOM.render(<App state={store.getState()} dispatch={store.dispatch} />, document.getElementById('root'));\nrootRender();\nstore.subscribe(rootRender);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}